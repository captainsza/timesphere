// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  username          String           @unique
  password          String
  schedules         Schedule[]
  points            Int              @default(0)
  badges            Badge[]
  level             Int              @default(1)
  rewards           Reward[]
  aiRecommendations AIRecommendation[]
  companionState    CompanionState?  // No need to define fields and references here
  companionStateId  String?          @db.ObjectId
  leaderboards      Leaderboard[]    @relation("UserLeaderboards")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
}

model CompanionState {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  state       String     // JSON or String to store state details
  userId      String     @unique @db.ObjectId
  user        User       @relation(fields: [userId], references: [id]) // Defined here
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Schedule {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  time        DateTime
  icon        String
  tasks       Task[]
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  startTime   DateTime
  endTime     DateTime
  completed   Boolean    @default(false)
  schedule    Schedule   @relation(fields: [scheduleId], references: [id])
  scheduleId  String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}

model Reward {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  points      Int
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  createdAt   DateTime   @default(now())
}

model Badge {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  icon        String
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  createdAt   DateTime   @default(now())
}

model AIRecommendation {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  message     String
  user        User       @relation(fields: [userId], references: [id])
  userId      String     @db.ObjectId
  createdAt   DateTime   @default(now())
}

model Leaderboard {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  points      Int
  rank        Int
  userId      String     @db.ObjectId
  user        User       @relation("UserLeaderboards", fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
}